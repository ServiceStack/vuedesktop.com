import{_ as e,c as a,o as s,a as t}from"./app.668d4be3.js";const f='{"title":"Gist Desktop Apps","description":"","frontmatter":{"title":"Gist Desktop Apps"},"headers":[{"level":2,"title":"Ultra Lightweight Desktop Apps","slug":"ultra-lightweight-desktop-apps"},{"level":2,"title":"Launch Desktop Apps from URLs","slug":"launch-desktop-apps-from-urls"},{"level":2,"title":"Deep Links","slug":"deep-links"},{"level":2,"title":"Create customized Apps by mixing in Gists","slug":"create-customized-apps-by-mixing-in-gists"},{"level":2,"title":"Launch from public or private GitHub Repos","slug":"launch-from-public-or-private-github-repos"},{"level":2,"title":"Private Repos & Gists","slug":"private-repos-gists"},{"level":2,"title":"Copy Directory","slug":"copy-directory"},{"level":2,"title":"Cross Platform Support","slug":"cross-platform-support"},{"level":2,"title":"Always uses latest version","slug":"always-uses-latest-version"}],"relativePath":"gist-desktop-apps.md","lastUpdated":1655548418603}',p={},o=t(`__VP_STATIC_START__<p>Whilst on the face of it <a href="https://sharpscript.net/sharp-apps/gist-desktop-apps" target="_blank" rel="noopener noreferrer">Gist Desktop Apps</a> appear to be similar to Electron Apps that utilizes a .NET Core backend instead of Node.js, it employs a shared architecture where all Apps are run with the same <a href="https://docs.servicestack.net/netcore-windows-desktop" target="_blank" rel="noopener noreferrer">app dotnet tool</a> installable with:</p><div class="language-bash"><pre><code>$ dotnet tool <span class="token function">install</span> -g app
</code></pre></div><p>Where it enables a number of unique features:</p><h2 id="ultra-lightweight-desktop-apps" tabindex="-1">Ultra Lightweight Desktop Apps <a class="header-anchor" href="#ultra-lightweight-desktop-apps" aria-hidden="true">#</a></h2><p>Unlike Electron which bundles Chromium with every install, all <a href="https://sharpscript.net/sharp-apps/" target="_blank" rel="noopener noreferrer">Sharp Desktop Apps</a> utilize the same <a href="https://docs.servicestack.net/netcore-windows-desktop" target="_blank" rel="noopener noreferrer">app dotnet tool</a> which in addition to the latest version of Chromium, also includes many popular .NET server + client JS/CSS framework libraries - saving Vue Desktop Apps from having to include them. This effectively reducing their footprint to just App-specific Server + Client logic, so whilst a Hello World Electron App can require <strong>&gt;100MB</strong>, this Vue Desktop Project Template bundles down to a <strong>15kb .zip</strong> - which includes the 14kb uncompressed .NET Server <strong>.dll</strong>.</p><h2 id="launch-desktop-apps-from-urls" tabindex="-1">Launch Desktop Apps from URLs <a class="header-anchor" href="#launch-desktop-apps-from-urls" aria-hidden="true">#</a></h2><p>Thanks to their light footprint Desktop Apps can be launched directly from URLs using the <code>app://</code> URL Scheme, e.g. a modified version of this Project Template can be launched from:</p><h3><a href="app://vuedesktop">app://vuedesktop</a></h3><p>Which uses the unique <a href="https://sharpscript.net/sharp-apps/gist-desktop-apps#publishing-gist-apps" target="_blank" rel="noopener noreferrer">global alias your app was published with</a>.</p><h2 id="deep-links" tabindex="-1">Deep Links <a class="header-anchor" href="#deep-links" aria-hidden="true">#</a></h2><p>It&#39;s also possible to pass additional params to enable deep links into Apps <a href="https://docs.servicestack.net/studio#starting-servicestack-studio" target="_blank" rel="noopener noreferrer">ServiceStack Studio utilizes</a> to be able download, run &amp; immediately invoke App specific functionality like connecting to a remote site, e.g:</p><div class="language-bash"><pre><code>app://studio?connect<span class="token operator">=</span>https://localhost:5001
</code></pre></div><h2 id="create-customized-apps-by-mixing-in-gists" tabindex="-1">Create customized Apps by mixing in Gists <a class="header-anchor" href="#create-customized-apps-by-mixing-in-gists" aria-hidden="true">#</a></h2><p>Another unique feature of Gist Desktop Apps is being able to mix in multiple files into the App&#39;s directory to create custom App builds, e.g. the <a href="https://sharpscript.net/sharp-apps/sharpdata" target="_blank" rel="noopener noreferrer">SharpData</a> generic RDBMS UI viewer utilizes this feature to copy &amp; immediately open an embedded SQLite database for querying:</p><h3><a href="app://sharpdata?mix=northwind.sharpdata">app://sharpdata?mix=northwind.sharpdata</a></h3><h3><a href="app://sharpdata?mix=chinook.sharpdata">app://sharpdata?mix=chinook.sharpdata</a></h3><h2 id="launch-from-public-or-private-github-repos" tabindex="-1">Launch from public or private GitHub Repos <a class="header-anchor" href="#launch-from-public-or-private-github-repos" aria-hidden="true">#</a></h2><p>If preferred Desktop Apps can also be published &amp; launched directly from your GitHub Repo which can be launched with <code>app://{user}/{repo}</code>, e.g\`:</p><ul><li><b><a href="app://sharp-apps/redis">app://sharp-apps/redis</a></b> - Redis Admin App</li><li><b><a href="app://sharp-apps/blog">app://sharp-apps/blog</a></b> - SQLite powered Blog App</li><li><b><a href="app://sharp-apps/spirals">app://sharp-apps/spirals</a></b> - SVG Spirals App</li><li><b><a href="app://sharp-apps/rockwind">app://sharp-apps/rockwind</a></b> - Multi Layout CMS + DB Admin UI Example</li></ul><div class="info custom-block"><p class="custom-block-title">Tip</p><p>Can open by pasting above links in browsers URL as GitHub doesn&#39;t render links with custom URL Schemes</p></div><p>If your repo has published releases it will use your most recent release, otherwise it uses the master archive.</p><h2 id="private-repos-gists" tabindex="-1">Private Repos &amp; Gists <a class="header-anchor" href="#private-repos-gists" aria-hidden="true">#</a></h2><p>Apps can also be launched from private Gists and Repos by either having end users configure the GitHub Access Token with access to the private gist or repo in the <code>GITHUB_TOKEN</code> Environment variable or can be specified in the URL or command-line with:</p><div class="language-bash"><pre><code>app://user/repo?token<span class="token operator">=</span><span class="token punctuation">{</span>GITHUB_TOKEN<span class="token punctuation">}</span>
$ app <span class="token function">open</span> user/repo -token <span class="token punctuation">{</span>GITHUB_TOKEN<span class="token punctuation">}</span>
</code></pre></div><h2 id="copy-directory" tabindex="-1">Copy Directory <a class="header-anchor" href="#copy-directory" aria-hidden="true">#</a></h2><p>Another way to distribute &amp; run Apps is to <strong>XCOPY</strong> the <code>/dist</code> folder which users can launch by running <code>app</code> command in the App&#39;s folder or by specifying the path to the app&#39;s <code>app.settings</code>, e.g:</p><div class="language-bash"><pre><code>$ app C:<span class="token punctuation">\\</span>path<span class="token punctuation">\\</span>to<span class="token punctuation">\\</span>app<span class="token punctuation">\\</span>app.settings
</code></pre></div><p>Where you can also <a href="https://docs.servicestack.net/netcore-windows-desktop#create-windows-desktop-shortcuts" target="_blank" rel="noopener noreferrer">create a Windows Shortcut</a> for a more integrated Desktop App:</p><div class="language-bash"><pre><code>$ <span class="token builtin class-name">cd</span> C:<span class="token punctuation">\\</span>path<span class="token punctuation">\\</span>to<span class="token punctuation">\\</span>app
$ app shortcut
</code></pre></div><div class="info custom-block"><p class="custom-block-title">Tip</p><p>Add <code>favicon.ico</code> to use your own icon in the shortcut</p></div><h2 id="cross-platform-support" tabindex="-1">Cross Platform Support <a class="header-anchor" href="#cross-platform-support" aria-hidden="true">#</a></h2><p>Whilst the <code>app</code> dotnet tool is Windows-only, all Sharp Apps can also be run cross-platform on macOS/Linux with the <a href="https://docs.servicestack.net/dotnet-tool" target="_blank" rel="noopener noreferrer">x dotnet tool</a> where it will open in the users preferred browser, e.g:</p><div class="language-bash"><pre><code>$ x <span class="token function">open</span> vuedesktop 
</code></pre></div><h2 id="always-uses-latest-version" tabindex="-1">Always uses latest version <a class="header-anchor" href="#always-uses-latest-version" aria-hidden="true">#</a></h2><p>Thanks to their tiny footprints the default behavior is to always download &amp; run the latest version of the App when published to a Gist or Repo which automatically happens when launching Apps using the <code>app://</code> URL Scheme or <code>app open</code> command.</p><p>If preferred you can save 1-3 seconds on an App&#39;s launch time by using the <code>app:</code> URL scheme or <code>app run</code> command where it will instead load the previously downloaded version, e.g:</p><div class="language-bash"><pre><code>app:vuedesktop
$ app run vuedesktop
</code></pre></div>__VP_STATIC_END__`,37),r=[o];function i(n,l,c,h,d,u){return s(),a("div",null,r)}var b=e(p,[["render",i]]);export{f as __pageData,b as default};
